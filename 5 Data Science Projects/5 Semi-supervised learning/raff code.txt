#include <iostream>
#include<fstream>
#include <string>
#include <math.h>
#include <map>

using namespace std;

#define ROW 669
#define COL 9
#define ATT_MAX_VALUE 10
#define YES -1                  ///for leveling
#define NO -2                   ///for leveling
#define UNDEFINED -3

///attributes
#define clump_thickness 0
#define uniformity_cell_size 1
#define uniformity_cell_shape 2
#define marginal_adhesion 3
#define single_epithelial_cell_size 4
#define bare_Nuclei 5
#define bland_chromatin 6
#define normal_nucleoli 7
#define class_att 8

struct node{
    int id;

    int att_no;
    int level;
};

map<int,node> tree;

char COMMA;

int input_data[ROW][COL];

void read_input_data(){
    ifstream file;
    file.open("input.csv");
    string temp;

    if(file.is_open()){
        getline(file,temp);   ///ignore the 1st line

        for(int r=0;r<ROW;r++){
            for(int c=0;c<COL-1;c++) file>>input_data[r][c]>>COMMA;
            file>>input_data[r][COL-1];
        }

        file.close();
    }
    else cout<<"can't open the file"<<endl;
}

void show_input_data(){
    for(int r=0;r<ROW;r++){
        for(int c=0;c<COL-1;c++) cout<<input_data[r][c]<<",";
        cout<<input_data[r][COL-1]<<endl;
    }
}

double calculate_entropy(int yes,int no){
    if(yes==0 || no==0) return 0;               ///log2(0)=0 guess
    if(yes==no) return 1;

    double p_plus=1.0*yes/(yes+no);
    double p_minus=1.0*no/(yes+no);

    return -p_plus*log2(p_plus)-p_minus*log2(p_minus);
}
/*
void create_attribute_table(int examples[ROW][COL],int r,int c,node n){
    int yes,no;

    for(int att=0;att<COL-1;att++){                                 ///for Class attribute the value is only 0/1
        for(int att_val=1;att_val<=ATT_MAX_VALUE;att_val++){        ///attribute value ranges from 1-10
            yes=0;
            no=0;

            for(int r=0;r<ROW;r++){
                if(input_data[r][att]==att_val && input_data[r][class_att]==1) yes++;
                else if(input_data[r][att]==att_val && input_data[r][class_att]==0) no++;
            }

            int row_number=att*10+(att_val-1);                  ///our attribute value starts from 0 :D
            att_entropy_table[row_number][0]=yes;
            att_entropy_table[row_number][1]=no;
            att_entropy_table[row_number][2]=calculate_entropy(yes,no);

        }
    }

    ///calculating entropy for the whole data set i.e class attribute
    yes=0;
    no=0;
    for(int r=0;r<ROW;r++){
        if(input_data[r][class_att]==1) yes++;
        else no++;
    }
    att_entropy_table[class_att*10][0]=yes;
    att_entropy_table[class_att*10][1]=no;
    att_entropy_table[class_att*10][2]=calculate_entropy(yes,no);
}

void show_attribute_table(){
    for(int i=0;i<COL*ATT_MAX_VALUE-9;i++) cout<<i<<" "<<att_entropy_table[i][0]<<" "<<att_entropy_table[i][1]<<" "<<att_entropy_table[i][2]<<endl;
}

int max_gain_att(int examples[ROW][COL],int r,int c,int att_list[COL],int att_list_size){



    double gain;
    for(int i=0;i<COL-1;i++){
        gain=att_entropy_table[class_att*ATT_MAX_VALUE][2];                 ///calculating gain for attribute no i
        double s=ROW;

        for(int j=0;j<ATT_MAX_VALUE;j++){
            double sv=att_entropy_table[i*ATT_MAX_VALUE+j][0]+att_entropy_table[i*10+j][1];

            gain-=(sv/s)*att_entropy_table[i*ATT_MAX_VALUE+j][2];
        }
        gain_table[i]=gain;
    }
}

void show_gain_table(){
    for(int i=0;i<COL-1;i++) cout<<"Gain : "<<gain_table[i]<<endl;
}
*/
///-----------------------------------------------------------------------------------------------------------------------
int find_best_att(int examples[ROW][COL],int r,int c,int att_list[COL],int att_list_size){      ///att list size=c-1

    ///building attribute entropy table
    double att_ent_table[COL*ATT_MAX_VALUE][3];

    int yes,no;
    for(int att=0;att<att_list_size;att++){
        for(int att_val=1;att_val<=ATT_MAX_VALUE;att_val++){
            yes=0;
            no=0;

            for(int i=0;i<r;i++){
                if(examples[i][att]==att_val && examples[i][c-1]==1) yes++;
                else if(examples[i][att]==att_val && examples[i][c-1]==0) no++;
            }
            att_ent_table[att*ATT_MAX_VALUE+(att_val-1)][0]=yes;
            att_ent_table[att*ATT_MAX_VALUE+(att_val-1)][1]=no;
            att_ent_table[att*ATT_MAX_VALUE+(att_val-1)][2]=calculate_entropy(yes,no);
        }
    }
    ///calculating entropy for the whole example data set
    yes=0;
    no=0;
    for(int i=0;i<r;i++){
        if(examples[i][c-1]==1) yes++;
        else no++;
    }
    att_ent_table[(c-1)*ATT_MAX_VALUE][0]=yes;
    att_ent_table[(c-1)*ATT_MAX_VALUE][1]=no;
    att_ent_table[(c-1)*ATT_MAX_VALUE][2]=calculate_entropy(yes,no);
    ///show att_ent_table
    for(int i=0;i<(c-1)*ATT_MAX_VALUE+1;i++){
        cout<<i<<" "<<att_ent_table[i][0]<<" "<<att_ent_table[i][1]<<" "<<att_ent_table[i][2]<<endl;
    }

    ///calculating maximum gain
    int att_no=UNDEFINED;
    double max_gain=UNDEFINED,gain;
    for(int i=0;i<COL-1;i++){
        gain=att_ent_table[(c-1)*ATT_MAX_VALUE][2];                 ///calculating gain for attribute no i
        double s=r;

        for(int j=0;j<ATT_MAX_VALUE;j++){
            double sv=att_ent_table[i*ATT_MAX_VALUE+j][0]+att_ent_table[i*10+j][1];

            gain-=(sv/s)*att_ent_table[i*ATT_MAX_VALUE+j][2];
        }
        cout<<i<<" gain is "<<gain<<endl;
        if(gain>max_gain) {max_gain=gain;att_no=i;}
    }
    return att_no;
}

node Decision_Tree(int examples[ROW][COL],int r,int c,int target_att[COL-1],int target_att_size,int att_list[COL-1],int att_list_size,int id){

    node n;
    n.id=id;
    n.att_no=UNDEFINED;
    n.level=UNDEFINED;

    ///calculating total no of yes and no
    int yes=0,no=0;
    for(int i=0;i<r;i++){
        if(examples[i][c-1]==1) yes++;
        else no++;
    }

    if(no==0){
        n.level=YES;
        return n;   ///if all examples are positive
    }
    else if(yes==0){
        n.level=NO;
        return n; ///if all examples are negative
    }
    else if(att_list_size==0) {
        ///problem confision
    }
    else{
        n.att_no=find_best_att(examples,r,c,att_list,att_list_size);
        cout<<n.att_no<<endl;


    }

    return n;
}

int main()
{
    read_input_data();
    ///show_input_data();

    ///taking input
    int target_att[COL-1];
    ///for(int i=0;i<COL-1;i++) cin>>target_att[i];
    for(int i=0;i<COL-1;i++) target_att[i]=i;

    ///preparing initial attribute list
    int att_list[COL-1];
    for(int i=0;i<COL-1;i++) att_list[i]=i;

    tree[0]=Decision_Tree(input_data,ROW,COL,target_att,COL-1,att_list,COL-1,0);      /// 0 is the id of the root node


    return 0;
}
